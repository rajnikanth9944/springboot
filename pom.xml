<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.sopromadze</groupId>
    <artifactId>blogapi</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>BlogAPI</name>
    <description>Blog API project with Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.8.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.12</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
      
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.mockito/mockito-all -->
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>2.0.2-beta</version>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-test -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>


		<!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-library -->
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.modelmapper/modelmapper -->
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>2.3.5</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-jwt</artifactId>
			<version>1.0.9.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security.oauth</groupId>
			<artifactId>spring-security-oauth2</artifactId>
			<version>[2.3.5,)</version>
		</dependency>

		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
		</dependency>

		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jsr310</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<mainClass>com.sopromadze.blogapi.BlogApiApplication</mainClass>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- plugins for sonarqube -->
						<plugin>
						      <groupId>org.sonarsource.scanner.maven</groupId>
						      <artifactId>sonar-maven-plugin</artifactId>
						      <version>3.2</version>
						  </plugin>
						<!-- plugin for code coverage -->
						<plugin>
							    <groupId>org.jacoco</groupId>
							    <artifactId>jacoco-maven-plugin</artifactId>
							    <version>0.7.5.201505241946</version>
									<executions>
								         <!--
								             Prepares the property pointing to the JaCoCo runtime agent which
								             is passed as VM argument when Maven the Surefire plugin is executed.
								         -->
								         <execution>
								             <id>pre-unit-test</id>
								             <goals>
								                 <goal>prepare-agent</goal>
								             </goals>
								             <configuration>
								                 <!-- Sets the path to the file which contains the execution data. -->
								                 <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
								                 <!--
								                     Sets the name of the property containing the settings
								                     for JaCoCo runtime agent.
								                 -->
								                 <propertyName>surefireArgLine</propertyName>
								             </configuration>
								         </execution>
								         <!--
								             Ensures that the code coverage report for unit tests is created after
								             unit tests have been run.
								         -->
								         <execution>
								             <id>post-unit-test</id>
								             <phase>test</phase>
								             <goals>
								                 <goal>report</goal>
								             </goals>
								             <configuration>
								                 <!-- Sets the path to the file which contains the execution data. -->
								                 <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
								                 <!-- Sets the output directory for the code coverage report. -->
								                 <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
								             </configuration>
								         </execution>
												 <!-- Integration Test -->
												 <execution>
												             <id>pre-integration-test</id>
												             <phase>pre-integration-test</phase>
												             <goals>
												                 <goal>prepare-agent</goal>
												             </goals>
												             <configuration>
												                 <!-- Sets the path to the file which contains the execution data. -->
												                 <destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
												                 <!--
												                     Sets the name of the property containing the settings
												                     for JaCoCo runtime agent.
												                 -->
												                 <propertyName>failsafeArgLine</propertyName>
												             </configuration>
												         </execution>
												         <!--
												             Ensures that the code coverage report for integration tests after
												             integration tests have been run.
												         -->
												         <execution>
												             <id>post-integration-test</id>
												             <phase>post-integration-test</phase>
												             <goals>
												                 <goal>report</goal>
												             </goals>
												             <configuration>
												                 <!-- Sets the path to the file which contains the execution data. -->
												                 <dataFile>${project.build.directory}/coverage-reports/jacoco-it.exec</dataFile>
												                 <!-- Sets the output directory for the code coverage report. -->
												                 <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
												             </configuration>
												         </execution>
								     </executions>
						</plugin>
						<!-- Maven surefire plugin -->
						<plugin>
						    <groupId>org.apache.maven.plugins</groupId>
						    <artifactId>maven-surefire-plugin</artifactId>
						    <!--version>2.15</version-->
						    <configuration>
						        <!-- Sets the VM argument line used when unit tests are run. -->
						        <argLine>${surefireArgLine}</argLine>
						        <!-- Skips unit tests if the value of skip.unit.tests property is true -->
						        <skipTests>${skip.unit.tests}</skipTests>
						        <!-- Excludes integration tests when unit tests are run. -->
						        <excludes>
						            <exclude>**/IT*.java</exclude>
						        </excludes>
						    </configuration>
						</plugin>

						<!-- Failsafe plugin for IT test -->
						<plugin>
						    <groupId>org.apache.maven.plugins</groupId>
						    <artifactId>maven-failsafe-plugin</artifactId>
						    <!--version>2.15</version-->
						    <executions>
						        <!--
						            Ensures that both integration-test and verify goals of the Failsafe Maven
						            plugin are executed.
						        -->
						        <execution>
						            <id>integration-tests</id>
						            <goals>
						                <goal>integration-test</goal>
						                <goal>verify</goal>
						            </goals>
						            <configuration>
						                <!-- Sets the VM argument line used when integration tests are run. -->
						                <argLine>${failsafeArgLine}</argLine>
						                <!--
						                    Skips integration tests if the value of skip.integration.tests property
						                    is true
						                -->
						                <skipTests>${skip.integration.tests}</skipTests>
						            </configuration>
						        </execution>
						    </executions>
						</plugin>

        </plugins>
		</plugins>
	</build>
</project>
